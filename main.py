
import asyncio
import re
import random
import logging
from collections import defaultdict
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaDocument, DocumentAttributeFilename

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
api_id = 12345678  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API ID
api_hash = 'cadcdasd12312eawcdawd21dsaca'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API Hash
session_name = 'session_name'
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Å—ã–ª—ã
main_channels = {
    -1000000000000: -2000000000000, 
    -3000000000000: -4000000000000,
}

# –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º 
keyword_channels = { 
    ("—Å–ª–æ–≤–æ", "—Å–ª–æ–≤–µ—á–∫–æ", "—Å–ª–æ–≤–∞"): -100000200000,
    ("–∞–∑–±—É–∫–∞"): -1000000200000,
}

compiled_keywords = [
    (re.compile(rf'\b({"|".join(words)})\b', flags=re.IGNORECASE), channel)
    for words, channel in keyword_channels.items()
]

client = TelegramClient(session_name, api_id, api_hash)

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–ª—å–±–æ–º–æ–≤)
group_buffer = defaultdict(list)
group_timers = {}

def extract_text_and_filenames(messages):
    text_parts = []
    filenames = []

    for msg in messages:
        if msg.message:
            text_parts.append(msg.message)

        if msg.media and isinstance(msg.media, MessageMediaDocument):
            for attr in msg.media.document.attributes:
                if isinstance(attr, DocumentAttributeFilename):
                    filenames.append(attr.file_name)

    return " ".join(text_parts + filenames)

async def process_and_forward(messages, source_id):
    dest_id = main_channels.get(source_id)
    if not dest_id:
        return

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª
    try:
        await client.forward_messages(dest_id, messages)
        logging.info(f"üì¶ –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª: {source_id} ‚Üí {dest_id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–µ ({dest_id}): {e}")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–∞–º
    content = extract_text_and_filenames(messages)
    found_channels = set()

    for regex, channel_id in compiled_keywords:
        if regex.search(content):
            if channel_id not in found_channels:
                try:
                    await client.forward_messages(channel_id, messages)
                    logging.info(f"üîë –ù–∞–π–¥–µ–Ω –∫–ª—é—á {regex.pattern} ‚Üí –≤ {channel_id}")
                    found_channels.add(channel_id)
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –∫–ª—é—á–µ–≤–æ–π –∫–∞–Ω–∞–ª ({channel_id}): {e}")

    await asyncio.sleep(random.uniform(3, 5))

async def flush_album(grouped_id, source_id):
    messages = group_buffer.pop(grouped_id, [])
    group_timers.pop(grouped_id, None)
    if messages:
        await process_and_forward(messages, source_id)

@client.on(events.NewMessage(chats=list(main_channels.keys())))
async def message_handler(event):
    msg = event.message
    grouped_id = getattr(msg, 'grouped_id', None)
    source_id = event.chat_id

    if grouped_id:
        group_buffer[grouped_id].append(msg)

        # –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞—ë–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1.5 —Å–µ–∫ ‚Äî –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–ª—å–±–æ–º–µ
        if group_timers.get(grouped_id):
            group_timers[grouped_id].cancel()

        group_timers[grouped_id] = asyncio.get_event_loop().call_later(
            1.5, lambda: asyncio.create_task(flush_album(grouped_id, source_id))
        )
    else:
        await process_and_forward([msg], source_id)

async def main():
    await client.start()
    logging.info("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.run(main())
